import logging
import tkinter as tk
from tkinter import ttk, messagebox
from ttkthemes import ThemedTk
from ttkwidgets import CheckboxTreeview 
from backend.models import Batch, Brand, Size, Color, ProductionPhase
from backend.barcode_gen_print import print_barcode_zebra, get_available_printers

def load_batches():
    return Batch.get_batches()

def filter_batches():
    filters = {
        "barcode": barcode_var.get().strip().lower(),
        "brand": brand_var.get().strip().lower(),
        "model": model_var.get().strip().lower(),
        "size": size_var.get().strip().lower(),
        "color": color_var.get().strip().lower(),
        "phase": phase_var.get().strip().lower(),
        "serial": serial_var.get().strip().lower(),
        "status": status_var.get().strip().lower()
    }

    for widget in table_frame.winfo_children():
        widget.destroy()

    global tree
    tree = CheckboxTreeview(
        table_frame, 
        columns=["Barcode", "Brand", "Model", "Size", "Color", "Quantity", "Layers", "Serial", "Phase", "Status"],
        show="tree headings"
    )
    
    tree.bind("<Double-1>", on_cell_double_click)
    tree.column("#0", width=50, stretch=False)
    

    for col in tree["columns"]:
        tree.heading(col, text=col)
        tree.column(col, anchor="center", width=120, stretch=True)

    filter_mapping = {
        "barcode": 0,
        "brand": 1,
        "model": 2,
        "size": 3,
        "color": 4,
        "serial": 7,
        "phase": 8,
        "status": 9
    }

    batches = load_batches()
    for batch in batches:
        batch_id = batch[0]
        display_batch = batch[1:]
        match = True
        for key, idx in filter_mapping.items():
            if filters[key] and filters[key] not in str(display_batch[idx]).lower():
                match = False
                break
        if match:
            tree.insert("", tk.END, values=display_batch, tags=("unchecked", str(batch_id)))

    tree.grid(row=0, column=0, sticky="nsew")

    vsb = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
    vsb.grid(row=0, column=1, sticky="ns")
    tree.configure(yscrollcommand=vsb.set)

    hsb = ttk.Scrollbar(table_frame, orient="horizontal", command=tree.xview)
    hsb.grid(row=1, column=0, sticky="ew", columnspan=2)
    tree.configure(xscrollcommand=hsb.set)

    table_frame.grid_rowconfigure(0, weight=1)
    table_frame.grid_columnconfigure(0, weight=1)

def select_all():
    """Selects all checkboxes in the treeview."""
    for item in tree.get_children():
        tree.change_state(item, "checked")

def clear_filters():
    barcode_var.set('')
    brand_var.set('')
    model_var.set('')
    size_var.set('')
    color_var.set('')
    phase_var.set('')
    serial_var.set('')
    status_var.set('')
    filter_batches()

def populate_dropdowns():
    brand_dropdown["values"] = list(Brand.get_brands().keys())
    size_dropdown["values"] = list(Size.get_sizes().keys())
    color_dropdown["values"] = list(Color.get_colors().keys())
    phase_dropdown["values"] = list(ProductionPhase.get_phases().keys())
    status_dropdown["values"] = ["Pending", "In Progress", "Completed"]

def on_cell_double_click(event):
    selected_item = tree.identify_row(event.y) 
    column = tree.identify_column(event.x)  

    if not selected_item or column == "#0": 
        return

    col_index = int(column[1:]) - 1  
    selected_values = tree.item(selected_item, "values")

    if not selected_values:
        return 

    # **Retrieve batch_id stored in the row's tags**
    batch_id = tree.item(selected_item, "tags")[1]

    col_name = tree["columns"][col_index]

    if col_name not in ["Status", "Phase"]:
        return

    # **Dropdown Values for Editing**
    combo_values = ["Pending", "In Progress", "Completed"] if col_name == "Status" else ["Cutting", "Sewing", "Packaging"]
    combo_widget = ttk.Combobox(tree, values=combo_values, state="readonly")
    combo_widget.set(selected_values[col_index]) 

    x, y, width, height = tree.bbox(selected_item, column)
    combo_widget.place(x=x, y=y, width=width, height=height)

    def save_edit(event):
        """Saves edited value when the user selects a new value."""
        new_value = combo_widget.get()
        combo_widget.destroy()

        if not new_value:
            return

        # **Update the treeview with the new value**
        values = list(tree.item(selected_item, "values"))
        values[col_index] = new_value
        tree.item(selected_item, values=values)

        # **Execute the update query using batch_id**
        try:
            if col_name == "Status":
                Batch.update_batch_status(batch_id, new_value)

            elif col_name == "Phase":
                phase_mapping = {"Cutting": 1, "Sewing": 2, "Packaging": 3}
                phase_id = phase_mapping.get(new_value, 1)
                Batch.update_batch_phase(batch_id, phase_id)

            messagebox.showinfo("Success", f"{col_name} updated to {new_value} successfully!")

        except Exception as e:
            messagebox.showerror("Database Error", f"Failed to update {col_name}: {str(e)}")

    combo_widget.bind("<<ComboboxSelected>>", save_edit)
    combo_widget.focus()

def delete_selected_row():
    selected_items = tree.get_checked()

    if not selected_items:
        messagebox.showerror("Error", "No row selected for deletion.")
        return

    confirm = messagebox.askyesno("Confirm Deletion", "Are you sure you want to delete the selected entry?")
    if not confirm:
        return

    try:
        for item in selected_items:
            batch_id = tree.item(item, "tags")[0]
            Batch.delete_batch(batch_id)
            tree.delete(item)
            
        messagebox.showinfo("Success", "Selected entries deleted successfully!")

    except Exception as e:
        messagebox.showerror("Database Error", f"Failed to delete entry: {str(e)}")

root = ThemedTk(theme="scidgreen")
root.title("Admin Database View")
root.minsize(900, 600)
root.geometry("1300x700")
root.resizable(True, True)

root.columnconfigure(0, weight=1)
root.rowconfigure(1, weight=1)

filter_frame = ttk.Frame(root, padding=10)
filter_frame.grid(row=0, column=0, sticky="ew")

barcode_var = tk.StringVar()
brand_var = tk.StringVar()
model_var = tk.StringVar()
size_var = tk.StringVar()
color_var = tk.StringVar()
phase_var = tk.StringVar()
serial_var = tk.StringVar()
status_var = tk.StringVar()

# Filters
ttk.Label(filter_frame, text="Barcode:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
barcode_entry = ttk.Entry(filter_frame, textvariable=barcode_var)
barcode_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")

ttk.Label(filter_frame, text="Brand:").grid(row=0, column=2, padx=5, pady=5, sticky="e")
brand_dropdown = ttk.Combobox(filter_frame, textvariable=brand_var, state="normal")
brand_dropdown.grid(row=0, column=3, padx=5, pady=5, sticky="ew")

ttk.Label(filter_frame, text="Model:").grid(row=0, column=4, padx=5, pady=5, sticky="e")
model_entry = ttk.Entry(filter_frame, textvariable=model_var)
model_entry.grid(row=0, column=5, padx=5, pady=5, sticky="ew")

ttk.Label(filter_frame, text="Size:").grid(row=1, column=0, padx=5, pady=5, sticky="e")
size_dropdown = ttk.Combobox(filter_frame, textvariable=size_var, state="normal")
size_dropdown.grid(row=1, column=1, padx=5, pady=5, sticky="ew")

ttk.Label(filter_frame, text="Color:").grid(row=1, column=2, padx=5, pady=5, sticky="e")
color_dropdown = ttk.Combobox(filter_frame, textvariable=color_var, state="normal")
color_dropdown.grid(row=1, column=3, padx=5, pady=5, sticky="ew")

ttk.Label(filter_frame, text="Serial:").grid(row=1, column=4, padx=5, pady=5, sticky="e")
serial_entry = ttk.Entry(filter_frame, textvariable=serial_var)
serial_entry.grid(row=1, column=5, padx=5, pady=5, sticky="ew")

ttk.Label(filter_frame, text="Phase:").grid(row=0, column=6, padx=5, pady=5, sticky="e")
phase_dropdown = ttk.Combobox(filter_frame, textvariable=phase_var, state="normal")
phase_dropdown.grid(row=0, column=7, padx=5, pady=5, sticky="ew")

ttk.Label(filter_frame, text="Status:").grid(row=1, column=6, padx=5, pady=5, sticky="e")
status_dropdown = ttk.Combobox(filter_frame, textvariable=status_var, state="readonly")
status_dropdown.grid(row=1, column=7, padx=5, pady=5, sticky="ew")

# Filter Buttons
filter_button = ttk.Button(filter_frame, text="Filter", command=filter_batches)
filter_button.grid(row=0, column=10, padx=5, pady=5, sticky="ew")

clear_button = ttk.Button(filter_frame, text="Clear Filters", command=clear_filters)
clear_button.grid(row=1, column=10, padx=5, pady=5, sticky="ew")

# Printing
ttk.Label(filter_frame, text="Printer:").grid(row=0, column=11, padx=5, pady=5, sticky="e")
printer_var = tk.StringVar()
printer_dropdown = ttk.Combobox(filter_frame, textvariable=printer_var, values=get_available_printers(), state="readonly")
printer_dropdown.grid(row=0, column=12, padx=5, pady=5, sticky="ew")

print_button = ttk.Button(filter_frame, text="Print Selected", command=print_selected_barcodes)
print_button.grid(row=1, column=12, padx=5, pady=5, sticky="ew")

table_frame = ttk.Frame(root, padding=10)
table_frame.grid(row=1, column=0, sticky="nsew")

select_all_button = ttk.Button(filter_frame, text="Select All", command=select_all)
select_all_button.grid(row=1, column=13, padx=5, pady=5, sticky="ew")

delete_button = ttk.Button(filter_frame, text="Delete Selected", command=delete_selected_row)
delete_button.grid(row=1, column=11, padx=5, pady=5, sticky="ew")

populate_dropdowns()
filter_batches()

root.mainloop()
